var fs = require("fs");
var util = require("util");

var exports = module.exports;

exports.version = "0.1.0";

var vcapSvcs = (process.env.VCAP_SERVICES ? JSON.parse(process.env.VCAP_SERVICES) : {});
var defaults;

function loadDefaults() {
	var data = fs.readFileSync("./cf-service-defaults.json");
	if(data) {
		defaults = JSON.parse(data);
	}
}
loadDefaults();

exports.defaults = defaults;

/**
 * Get the configuration for a named service or a default.
 */
exports.getServiceConfig = function(name) {
	util.debug(JSON.stringify(vcapSvcs));
	for(type in vcapSvcs) {
		var svcDef = vcapSvcs[type];
		for(svc in svcDef) {
			if(svcDef[svc]["name"] == name) {
				var creds = svcDef[svc].credentials;
				var config = {
					node_id: creds.node_id,
					hostname: creds.hostname,
					port: creds.port,
					username: creds.username,
					password: creds.password,
					name: creds.name,
					db: creds.db
				}
				return config;
			}
		}
	}
	
	if(typeof defaults[name] != "undefined") {
		var defs = defaults[name];
		var config = {
			node_id: defs.node_id || null,
			hostname: defs.hostname || "localhost",
			port: defs.port || null,
			name: defs.name || null,
			password: defs.password || null
		}
		return config;
	} else {
		throw "No defaults found for '" + name + "' and not running in the cloud";
	}
}

/**
 * Returns boolean indicating whether this app is running on the cloud or not.
 */
exports.isRunningInCloud = function() {
	return (typeof process.env.VCAP_SERVICES != "undefined");
}

/**
 * Get the VCAP_APP_PORT value or a default.
 */
exports.getAppPort = function(def) {
	return (process.env.VCAP_APP_PORT || (def || 3000));
}